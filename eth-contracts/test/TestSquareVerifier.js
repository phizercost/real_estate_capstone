// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require("Verifier");
var proof = require("./proof");

contract("TestSquareVerifier", (accounts) => {
  const account_one = accounts[0];
  // - use the contents from proof.json generated from zokrates steps
  let proofElements = proof.proof;
  let proofInputs = proof.inputs;
  let proofWrongInputs = [100, 200];

  describe("zokrates - testing verifier", function () {
    beforeEach(async function () {
      this.contract = await Verifier.new({ from: account_one });
    });
    // Test verification with correct proof
    it("verifies with correct proof", async function () {
      let verification = await this.contract.verifyTx.call(
        proofElements.a,
        proofElements.b,
        proofElements.c,
        proofInputs,
        { from: account_one }
      );
      assert.equal(true, verification, "it does not verify with correct proof");
    });

    // Test verification with incorrect proof
    it("it does not verify with incorrect proof", async function () {
      let verification = await this.contract.verifyTx.call(
        proofElements.a,
        proofElements.b,
        proofElements.c,
        proofWrongInputs,
        { from: account_one }
      );
      assert.equal(false, verification, "it verifies with incorrect proof");
    });
  });
});
